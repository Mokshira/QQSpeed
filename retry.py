import keyboard
import pyautogui
import time
import base64
import cv2
import numpy as np
from io import BytesIO
from PIL import Image

listening_enabled = False

# 预留变量用于填入retry.png的base64编码
RETRY_IMAGE_BASE64 = ""

# 将base64编码转换为OpenCV图像
def base64_to_cv2_image(base64_string):
    # 解码
    image_data = base64.b64decode(base64_string)
    # 将字节数据转换为PIL图像
    pil_image = Image.open(BytesIO(image_data))
    # 转换为OpenCV格式
    opencv_image = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)
    return opencv_image

# 找
def find(confidence=0.7, timeout=1):
    keyboard.press('esc') # 确保呼出界面
    time.sleep(0.02)
    
    # 将base64编码转换为OpenCV图像
    template_image = base64_to_cv2_image(RETRY_IMAGE_BASE64)
    
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            # 截取屏幕
            screenshot = pyautogui.screenshot()
            screen_image = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
            
            # 模板匹配
            result = cv2.matchTemplate(screen_image, template_image, cv2.TM_CCOEFF_NORMED)
            _, max_val, _, max_loc = cv2.minMaxLoc(result)
            
            if max_val >= confidence:
                # 计算匹配区域的中心点
                h, w = template_image.shape[:2]
                center_x = max_loc[0] + w // 2
                center_y = max_loc[1] + h // 2
                return (center_x, center_y)
                
        except Exception as e:
            print(f"Error: {e}")
            pass
        time.sleep(0.02)
    return None

# 点
def click():
    retry_loc = find()
    if retry_loc is None:
        return False
    
    pyautogui.click(retry_loc)
    time.sleep(0.01)
    pyautogui.click(retry_loc)
    return True

# ESC触发
def on_esc_pressed():
    if listening_enabled:
        click() # 点击图片的地址

# 监听
def toggle_listening():
    global listening_enabled
    listening_enabled = not listening_enabled
    
    if listening_enabled:
        print("监听已开启。")
        keyboard.add_hotkey('esc', on_esc_pressed)
    else:
        print("监听已关闭。")
        keyboard.remove_hotkey('esc')

# 主程序
if __name__ == "__main__":
    # 当 F1 键被按下时，开始监听重启挑战
    keyboard.add_hotkey('f1', toggle_listening)
    try:
        keyboard.wait()
    except KeyboardInterrupt:
        print("程序已退出。")
